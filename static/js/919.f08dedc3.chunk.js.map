{"version":3,"file":"static/js/919.f08dedc3.chunk.js","mappings":"4LAUA,EARe,WACb,OACE,0BACE,SAAC,KAAD,CAAWA,MAAM,aAGtB,C,wJCsCD,EAzCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRD,GAAU,GACV,IAAME,EAAY,mCAAG,8GAEKC,EAAAA,EAAAA,IAAgBT,GAFrB,OAEXU,EAFW,OAGjBN,EAAWM,GAHM,gDAKjBC,QAAQC,IAAR,MALiB,yBAOjBN,GAAU,GAPO,4EAAH,qDAUlBE,GACD,GAAE,CAACR,KAGF,gCACGK,IAAU,SAACQ,EAAA,EAAD,IACS,IAAnBV,EAAQW,QACP,wBAAI,+CAEJ,wBACGX,EAAQY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,2BACE,0BAAM,YAAc,IAAED,MAExB,uBAAIC,MAJGF,EADE,QAYtB,C,+LC1CDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,qCAAwCC,IADhC,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,EADpB,+CADM,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAQfG,EAAY,mCAAG,WAAM1B,GAAN,yFACHmB,EAAAA,EAAAA,IAAA,gBACZnB,EADY,oBACOoB,EADP,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZK,EAAY,mCAAG,WAAM3B,GAAN,yFACHmB,EAAAA,EAAAA,IAAA,gBACZnB,EADY,4BACeoB,EADf,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,EAAKM,MALc,2CAAH,sDAOZnB,EAAe,mCAAG,WAAMT,GAAN,yFACNmB,EAAAA,EAAAA,IAAA,gBACZnB,EADY,4BACeoB,EADf,oBADM,uBACrBE,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,qD","sources":["components/Loader/Loader.js","components/Reviews/Reviews.js","services/api.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <ThreeDots color=\"#1e45e3\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsMovie } from '../../services/api';\nimport Loader from '../Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    const fetchReviews = async () => {\n      try {\n        const Reviews = await getReviewsMovie(movieId);\n        setReviews(Reviews);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loader && <Loader />}\n      {reviews.length === 0 ? (\n        <h3>We don't have any reviews for this movie.</h3>\n      ) : (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>\n                <span>Author:</span> {author}\n              </h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '0855e5c8bd4c6414816e74d753a96a04';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\nexport const getReviewsMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.results;\n};\n"],"names":["color","movieId","useParams","useState","reviews","setReviews","loader","setLoader","useEffect","fetchReviews","getReviewsMovie","Reviews","console","log","Loader","length","map","id","author","content","axios","API_KEY","getTrendingMovies","data","results","getMovieByQuery","query","getMovieById","getCastMovie","cast"],"sourceRoot":""}