{"version":3,"file":"static/js/657.b7c9bca2.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.js","webpack://react-homework-template/./src/components/searchForm/Form.module.css?295c","components/searchForm/Form.js","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <ThreeDots color=\"#1e45e3\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"movie_list\":\"MoviesList_movie_list__m49C0\",\"list_item\":\"MoviesList_list_item__WNhrl\",\"list_link\":\"MoviesList_list_link__3jHf1\",\"movie_title\":\"MoviesList_movie_title__HT75l\"};","import css from './MoviesList.module.css';\nimport { useLocation, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nconst DEFAULT_IMG = 'https://via.placeholder.com/320x480.jpg/CCCCCC/000000';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className={css.movie_list}>\n      {movies.map(({ id, original_title, title, poster_path }) => (\n        <li className={css.list_item} key={id}>\n          <Link\n            className={css.list_link}\n            state={{ from: location }}\n            to={`/movies/${id}`}\n          >\n            <img\n              src={\n                poster_path\n                  ? BASE_POSTER_URL + poster_path\n                  : `${DEFAULT_IMG}?text=${title}`\n              }\n              alt={title}\n            />\n            <h2 className={css.movie_title}>{title || original_title}</h2>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__KEwht\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Form.module.css';\n\nconst Form = ({ setSearchParams }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSearchParams = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      return alert('Input searchText!');\n    }\n    setSearchParams({ query });\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies title\"\n        value={query}\n        onChange={handleSearchParams}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default Form;\n\nForm.propTypes = {\n  setSearchParams: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from 'services/api';\nimport Form from 'components/searchForm/Form';\nimport Loader from '../../components/Loader';\nimport MoviesList from 'components/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const currentQuery = searchParams.get('query');\n    if (!currentQuery) {\n      return;\n    }\n    const fetchMovieByQuery = async () => {\n      setLoader(true);\n      try {\n        const movieByQuery = await getMovieByQuery(currentQuery);\n        setMovies(movieByQuery);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchMovieByQuery();\n  }, [searchParams]);\n\n  return (\n    <div>\n      <Form setSearchParams={setSearchParams} />\n      {loader && <Loader />}\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '0855e5c8bd4c6414816e74d753a96a04';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\nexport const getReviewsMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.results;\n};\n"],"names":["color","movies","location","useLocation","className","css","map","id","original_title","title","poster_path","state","from","to","src","alt","setSearchParams","useState","query","setQuery","onSubmit","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","target","setMovies","loader","setLoader","useSearchParams","searchParams","useEffect","currentQuery","get","fetchMovieByQuery","getMovieByQuery","movieByQuery","console","log","Loader","MoviesList","axios","API_KEY","getTrendingMovies","data","results","getMovieById","movieId","getCastMovie","cast","getReviewsMovie"],"sourceRoot":""}