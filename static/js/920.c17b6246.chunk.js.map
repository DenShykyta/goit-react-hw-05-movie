{"version":3,"file":"static/js/920.c17b6246.chunk.js","mappings":"4LAUA,EARe,WACb,OACE,0BACE,SAAC,KAAD,CAAWA,MAAM,aAGtB,C,uJCPD,EAA2B,4BAA3B,EAAqE,+BAArE,EAAuH,oCAAvH,EAAwK,8BAAxK,EAAgN,2B,SCwFhN,EA1EkB,WAAO,IAAD,MACtB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAiB7C,OAfAC,EAAAA,EAAAA,YAAU,WACRR,GAAU,GACV,IAAMS,EAAc,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaT,GAFlB,OAEbU,EAFa,OAGnBb,EAASa,GAHU,gDAKnBC,QAAQC,IAAR,MALmB,yBAOnBb,GAAU,GAPS,4EAAH,qDAUpBS,GACD,GAAE,CAACR,KAGF,iCACE,SAAC,KAAD,CAAMa,UAAWC,EAAcC,GAAIX,EAAnC,SAAiD,cAGhDN,IAAU,SAACkB,EAAA,EAAD,KACX,iBAAKH,UAAWC,EAAhB,WACE,gBACEG,IACErB,EAAMsB,YAnCM,mCAoCUtB,EAAMsB,YAD5B,UAlCQ,oDAkCR,iBAE2BtB,EAAMuB,OAEnCC,IAAKxB,EAAMuB,MACXE,MAAM,WAER,iBAAKR,UAAWC,EAAhB,WACE,wBAAKlB,EAAM0B,kBACX,yBAAG,YAAU1B,EAAM2B,iBACnB,wBAAI,cACJ,uBAAI3B,EAAM4B,YACV,wBAAI,YACJ,eAAIX,UAAWC,EAAf,mBACGlB,EAAM6B,cADT,aACG,EAAcC,KAAI,SAAAC,GAAK,OACtB,wBAAoBA,EAAMC,MAAjBD,EAAME,GADO,aAM9B,iBAAKhB,UAAWC,EAAhB,WACE,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CAASC,GAAG,OAAOV,MAAOH,EAASG,MAAnC,SAA0C,YAI5C,yBACE,SAAC,KAAD,CAASU,GAAG,UAAUV,MAAOH,EAASG,MAAtC,SAA6C,kBAKjD,SAAC,EAAAyB,SAAD,WACE,SAAC,KAAD,WAKT,C,+LCrFDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,qCAAwCC,IADhC,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,EADpB,+CADM,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAQf1B,EAAY,mCAAG,WAAMT,GAAN,yFACH+B,EAAAA,EAAAA,IAAA,gBACZ/B,EADY,oBACOgC,EADP,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZI,EAAY,mCAAG,WAAMtC,GAAN,yFACH+B,EAAAA,EAAAA,IAAA,gBACZ/B,EADY,4BACegC,EADf,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,EAAKK,MALc,2CAAH,sDAOZC,EAAe,mCAAG,WAAMxC,GAAN,yFACN+B,EAAAA,EAAAA,IAAA,gBACZ/B,EADY,4BACegC,EADf,oBADM,uBACrBE,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,qD","sources":["components/Loader/Loader.js","webpack://react-homework-template/./src/pages/MovieCard/MovieCard.module.css?2455","pages/MovieCard/MovieCard.js","services/api.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <ThreeDots color=\"#1e45e3\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"backLink\":\"MovieCard_backLink__YUZXL\",\"generalInfo\":\"MovieCard_generalInfo__ZDw56\",\"generalInfo_text\":\"MovieCard_generalInfo_text__mefVr\",\"genresList\":\"MovieCard_genresList__7KBk4\",\"addInfo\":\"MovieCard_addInfo__9G3N1\"};","import {\n  Link,\n  NavLink,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { Suspense, useState, useEffect } from 'react';\nimport { getMovieById } from 'services/api';\nimport Loader from '../../components/Loader';\nimport css from './MovieCard.module.css';\n\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nconst DEFAULT_IMG = 'https://via.placeholder.com/320.png/CCCCCC/000000';\n\nconst MovieCard = () => {\n  const [movie, setMovie] = useState({});\n  const [loader, setLoader] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    setLoader(true);\n    const fetchMovieById = async () => {\n      try {\n        const movieById = await getMovieById(movieId);\n        setMovie(movieById);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchMovieById();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link className={css.backLink} to={backLinkHref}>\n        &#60; Go back\n      </Link>\n      {loader && <Loader />}\n      <div className={css.generalInfo}>\n        <img\n          src={\n            movie.poster_path\n              ? BASE_POSTER_URL + movie.poster_path\n              : `${DEFAULT_IMG}?text=${movie.title}`\n          }\n          alt={movie.title}\n          width=\"320px\"\n        />\n        <div className={css.generalInfo_text}>\n          <h2>{movie.original_title}</h2>\n          <p>Avarage: {movie.vote_average}</p>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h4>Genres</h4>\n          <ul className={css.genresList}>\n            {movie.genres?.map(genre => (\n              <li key={genre.id}>{genre.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className={css.addInfo}>\n        <h5>Additional information</h5>\n        <ul>\n          <li>\n            <NavLink to=\"cast\" state={location.state}>\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\" state={location.state}>\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default MovieCard;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '0855e5c8bd4c6414816e74d753a96a04';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\nexport const getReviewsMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.results;\n};\n"],"names":["color","useState","movie","setMovie","loader","setLoader","movieId","useParams","location","useLocation","backLinkHref","state","from","useEffect","fetchMovieById","getMovieById","movieById","console","log","className","css","to","Loader","src","poster_path","title","alt","width","original_title","vote_average","overview","genres","map","genre","name","id","Suspense","axios","API_KEY","getTrendingMovies","data","results","getMovieByQuery","query","getCastMovie","cast","getReviewsMovie"],"sourceRoot":""}